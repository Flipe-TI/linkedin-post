import os
import webbrowser
from dotenv import load_dotenv, find_dotenv
from langchain_groq import ChatGroq
from langchain_core.prompts import ChatPromptTemplate

# Carregar vari√°veis de ambiente
load_dotenv(find_dotenv())
api_key = os.getenv("GROQ_API_KEY")

# Inicializar agentes ChatGroq
topic_agent = ChatGroq(
    temperature=1,
    api_key=api_key,
    model_name="llama-3.3-70b-versatile"
)

question_agent = ChatGroq(
    temperature=1,
    api_key=api_key,
    model_name="llama-3.3-70b-versatile"
)

text_agent = ChatGroq(
    temperature=1,
    api_key=api_key,
    model_name="llama-3.3-70b-versatile"
)

# Fun√ß√£o para gerar t√≥picos
def generate_topics(excluded_topics=None) -> list:
    excluded_topics = excluded_topics or []
    system_prompt = (
        """Voc√™ √© um especialista em marketing de conte√∫do focado em tecnologia e dados. Sua tarefa √© criar uma lista de ideias criativas para posts no LinkedIn sobre os temas de An√°lise de Dados, Business Intelligence, Data Science e Programa√ß√£o.  

        # Instru√ß√µes:  
        - Gere 5 ideias de postagens que sejam envolventes, informativas e que gerem engajamento.  
        - Varie os tipos de post: dicas pr√°ticas, insights de carreira, tend√™ncias da √°rea, desafios comuns, estudos de caso, storytelling pessoal e provoca√ß√µes para discuss√£o.  
        - Considere o p√∫blico-alvo: analistas, cientistas de dados, desenvolvedores, l√≠deres de tecnologia e entusiastas da √°rea.  
        - Use um tom profissional, mas acess√≠vel, com linguagem clara e impactante.  
        - Evite ideias gen√©ricas ‚Äì traga abordagens diferenciadas e relevantes.  

        # Exemplos de formatos de post:  
        - **Storytelling**: ‚ÄúO que eu gostaria de saber antes de come√ßar na √°rea de {{TEMA}}‚Ä¶‚Äù  
        - **Dicas Pr√°ticas**: ‚Äú5 erros comuns que todo iniciante em {{TEMA}} comete (e como evitar)‚Äù  
        - **Provoca√ß√£o**: ‚ÄúSer√° que ainda vale a pena aprender {{LINGUAGEM/TECNOLOGIA}} em {{ANO}}?‚Äù  
        - **Tend√™ncia**: ‚ÄúO futuro do {{TEMA}}: quais habilidades ser√£o essenciais nos pr√≥ximos anos?‚Äù  
        - **Compara√ß√£o**: ‚ÄúSQL vs. Python para an√°lise de dados ‚Äì Qual √© melhor para o seu caso?‚Äù  

        Gere as ideias de postagens dentro das tags <topicos></topicos>.  

        # Exemplo de sa√≠da esperada:  
        <topicos>  
        1. Como come√ßar em Data Science sem experi√™ncia (um roadmap pr√°tico)  
        2. A verdade sobre certifica√ß√µes em BI: vale a pena investir?  
        3. 3 hacks de Python que todo Analista de Dados deveria conhecer  
        4. Intelig√™ncia Artificial vai substituir os Analistas de Dados? Minha vis√£o sobre o futuro da profiss√£o  
        5. De Analista a Gestor de Dados: Como crescer na carreira e liderar times  
        </topicos>  
        """
        f"N√£o inclua os seguintes t√≥picos: {', '.join(excluded_topics)}." if excluded_topics else ""
    )
    prompt = ChatPromptTemplate.from_messages([("system", system_prompt)])
    chain = prompt | topic_agent
    response = chain.invoke({"text": ""})
    
    topics = response.content.split("\n")
    return [topic.strip() for topic in topics if topic.strip()]

# Fun√ß√£o para gerar perguntas usando o primeiro agente
def generate_prompt_questions(topic: str) -> str:
    system_prompt = """# Instru√ß√µes

        Voc√™ √© um especialista em an√°lise t√©cnica e pensamento cr√≠tico. Sua tarefa √© gerar uma s√©rie de perguntas t√©cnicas aprofundadas sobre um determinado t√≥pico, levando em conta diferentes aspectos e implica√ß√µes. O objetivo √© desencadear um pensamento em cadeia, onde cada pergunta aprofunda a anterior ou explora novas dire√ß√µes relacionadas ao tema.

        ## Par√¢metros de entrada

        <t√≥pico>  
        {{T√ìPICO_FORNECIDO}}  
        </t√≥pico>  

        ## Diretrizes

        1. Comece com uma pergunta t√©cnica fundamental sobre o t√≥pico.  
        2. A partir dessa pergunta, gere perguntas adicionais que aprofundem ou expandam o pensamento.  
        3. Utilize abordagens multidisciplinares quando aplic√°vel.  
        4. Considere impactos pr√°ticos, te√≥ricos e futuros sobre o tema.  
        5. As perguntas devem cobrir diferentes n√≠veis de complexidade, indo do b√°sico ao avan√ßado.  

        ## Formato de sa√≠da

        As perguntas ser√£o listadas e numeradas em ordem l√≥gica de complexidade e rela√ß√£o com o t√≥pico inicial:

        1. **[Pergunta inicial sobre o tema]**  
        2. **[Pergunta que aprofunda a anterior]**  
        3. **[Pergunta que explora uma perspectiva alternativa]**  
        4. **[Pergunta sobre implica√ß√µes pr√°ticas]**  
        5. **[Pergunta desafiadora que estimula pensamento cr√≠tico]**  
        6. **[Pergunta avan√ßada sobre aplica√ß√µes futuras]**  

        ### Exemplo de sa√≠da para o t√≥pico "{{T√ìPICO_FORNECIDO}}":  

        1. O que √© {{T√ìPICO_FORNECIDO}} e como ele funciona?  
        2. Quais s√£o os principais desafios t√©cnicos na implementa√ß√£o de {{T√ìPICO_FORNECIDO}}?  
        3. Como a abordagem X difere da abordagem Y na resolu√ß√£o de problemas relacionados a {{T√ìPICO_FORNECIDO}}?  
        4. Quais s√£o as aplica√ß√µes pr√°ticas de {{T√ìPICO_FORNECIDO}} em diferentes ind√∫strias?  
        5. Quais limita√ß√µes atuais impedem o avan√ßo de {{T√ìPICO_FORNECIDO}} e quais s√£o as poss√≠veis solu√ß√µes?  
        6. Como {{T√ìPICO_FORNECIDO}} pode evoluir nos pr√≥ximos 10 anos com novas tecnologias emergentes?  
        """
    human_prompt = f"<t√≥pico>  {topic} </t√≥pico> "
    
    prompt = ChatPromptTemplate.from_messages([("system", system_prompt), ("human", human_prompt)])
    chain = prompt | question_agent
    response = chain.invoke({"text": ""})
    
    return response.content

# Fun√ß√£o para gerar texto usando o segundo agente
def generate_text(questions: str, feedback: str = None, texto_anterior: str = None) -> str:
    system_prompt = """# Objetivo  
        Voc√™ √© um especialista em cria√ß√£o de conte√∫do para LinkedIn, ajudando um Analista de BI Pleno a aumentar o engajamento e compartilhar insights valiosos sobre dados, programa√ß√£o e intelig√™ncia artificial. Seu tom deve ser jovem, bem-humorado e envolvente, tornando temas t√©cnicos acess√≠veis e interessantes para suas conex√µes.  

        ## Informa√ß√µes sobre o Criador de Conte√∫do  
        - **Cargo:** Analista de BI Pleno  
        - **Personalidade:** Jovem, descontra√≠do e com um humor sarcastico, apaixonado por tecnologia  
        - **Objetivo:** Aumentar engajamento, atrair conex√µes de recrutadores e trazer conte√∫dos relevantes sobre BI, programa√ß√£o e IA  
        - **Tom de voz:** Leve, bem-humorado, envolvente, sem perder a credibilidade  

        ##Lembre-se
        - N√ÉO USAR MARKDOWNS.
        - Use emoticons sem exagerar.

        ## Estrutura do Post  
        Crie um post seguindo esta estrutura:  

        1. **Abertura Impactante** ‚Äì Comece com uma frase chamativa, uma pergunta instigante ou uma piada relacionada ao mundo dos dados e tecnologia. Algo que fa√ßa as pessoas pararem para ler.  
        2. **Contexto e Reflex√£o** ‚Äì Introduza o tema do post com uma situa√ß√£o do dia a dia, uma tend√™ncia de mercado ou um aprendizado pessoal, conectando-se com a realidade da audi√™ncia.  
        3. **Conte√∫do Principal** ‚Äì Explique um conceito de BI, programa√ß√£o ou IA de forma simples e envolvente, usando analogias, memes ou exemplos pr√°ticos.  
        4. **Chamado √† Intera√ß√£o** ‚Äì Termine o post incentivando coment√°rios e discuss√µes, seja pedindo opini√£o, sugerindo um desafio ou criando um debate amig√°vel.  

        ## Exemplos de T√≥picos  
        Aqui est√£o algumas ideias de posts que podem ser criados seguindo essa estrutura:  

        - "O dia em que meu SQL rodou mais devagar que meu Wi-Fi de madrugada‚Ä¶ e o que aprendi com isso!"  
        - "Se o Excel fosse um super-her√≥i, qual seria seu superpoder?"  
        - "Afinal, ser√° que a IA vai roubar o nosso trampo ou s√≥ transformar a gente em super-hackers dos dados?"  
        - "5 atalhos no Python que v√£o te fazer parecer um mago da programa√ß√£o üßô‚Äç‚ôÇÔ∏è"  
        - "O que o ChatGPT pode (e n√£o pode) fazer por um Analista de BI?"  

        ## Formato da Resposta  
        O post final deve ser entregue dentro das tags `<post> </post>` e seguir a estrutura mencionada.  

        ### Exemplo de sa√≠da esperada:  

        ```xml
        <post>
        üöÄ O SQL rodou‚Ä¶ mas levou tanto tempo que pensei em trocar de carreira  

        Quem nunca escreveu uma query e foi tomar um caf√© esperando o resultado? ü´†  
        Hoje vou compartilhar 3 otimiza√ß√µes simples que podem salvar seu tempo (e seu caf√©):  

        1Ô∏è‚É£ Use √≠ndices para acelerar buscas  
        2Ô∏è‚É£ Evite SELECT * ‚Äì s√≥ pegue o que precisa  
        3Ô∏è‚É£ Subqueries? Prefira CTEs!  

        J√° testou essas dicas? Conta a√≠ nos coment√°rios se seu SQL j√° te fez sofrer! üòÇ  
        </post>

        ##Lembre-se
        - N√ÉO USAR MARKDOWNS.
        - Use emoticons sem exagerar.
        """
    if feedback:
        response_user = (
            f"#Aplique o seguinte feedback:\n {feedback}" 
            f"#Aplique no texto a seguir:\n {texto_anterior}"
        )
        system_prompt = response_user
    
    human_prompt = f"Sinta se a vontade para responder e pensar sobre as seguintes quest√µes antes de responder: {questions}"
    
    prompt = ChatPromptTemplate.from_messages([("system", system_prompt), ("human", human_prompt)])
    chain = prompt | text_agent
    response = chain.invoke({"text": ""})
    
    return response.content

# Fun√ß√£o para salvar texto em arquivo e abrir navegador
def save_and_open_text_file(content: str, filename: str = "linkedin_post.txt"):
    with open(filename, "w", encoding="utf-8") as file:
        file.write(content)
    
    os.system(f"start {filename}" if os.name == "nt" else f"open {filename}")
    webbrowser.open("https://www.linkedin.com")

# Fluxo principal
def main():
    try:
        excluded_topics = []
        while True:
            print("Escolha uma op√ß√£o:")
            print("1. Gerar t√≥picos automaticamente")
            print("2. Inserir um t√≥pico manualmente")
            option = input("Op√ß√£o escolhida (1/2): ").strip()
            
            if option == '1':
                print("Gerando t√≥picos...")
                topics = generate_topics(excluded_topics)
                
                print("\nT√≥picos sugeridos:")
                for i, topic in enumerate(topics, start=1):
                    print(f"{i}. {topic}")
                
                choice = input("\nEscolha o n√∫mero do t√≥pico desejado ou 'R' para gerar novos t√≥picos: ").strip().upper()
                if choice == 'R':
                    excluded_topics.extend(topics)
                    print("\nGerando novos t√≥picos excluindo os anteriores...\n")
                    continue
                
                if choice.isdigit() and 1 <= int(choice) <= len(topics):
                    selected_topic = topics[int(choice) - 1]
                else:
                    print("Op√ß√£o inv√°lida. Tente novamente.")
                    continue
            elif option == '2':
                selected_topic = input("Insira o t√≥pico desejado: ").strip()
            else:
                print("Op√ß√£o inv√°lida. Tente novamente.")
                continue
            
            print(f"\nT√≥pico escolhido: {selected_topic}")
            
            # Gerar perguntas
            print("\nGerando perguntas...")
            questions = generate_prompt_questions(selected_topic)
            print(f"Perguntas geradas:\n{questions}\n")
            
            # Gerar texto final
            while True:
                print("Gerando texto final...")
                linkedin_text = generate_text(questions)
                print(f"Texto gerado:\n{linkedin_text}\n")
                
                feedback = input("Gostou do texto? Se n√£o, insira coment√°rios para melhorias ou pressione Enter para aceitar: ").strip()
                if not feedback:
                    break
                print("Reaplicando melhorias com base no feedback...\n")
                linkedin_text = generate_text(questions, feedback, linkedin_text)
            
            # Salvar e abrir o texto
            save_and_open_text_file(linkedin_text)
            print("Texto salvo e pronto para revis√£o.")
            break
    except Exception as e:
        print(f"Erro durante a execu√ß√£o: {str(e)}")

if __name__ == "__main__":
    main()
